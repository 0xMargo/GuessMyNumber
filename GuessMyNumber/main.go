package main

import (
	"fmt"
	"math/rand"
	"os"
	"os/exec"
	"runtime"
	"time"
)

var clear map[string]func() //create a map for storing clear funcs

func init() {
	clear = make(map[string]func()) //Initialize it
	clear["linux"] = func() {
		cmd := exec.Command("clear") //Linux example, its tested
		cmd.Stdout = os.Stdout
		cmd.Run()
	}
	clear["windows"] = func() {
		cmd := exec.Command("cmd", "/c", "cls") //Windows example, its tested
		cmd.Stdout = os.Stdout
		cmd.Run()
	}
}

func cClear() {
	value, ok := clear[runtime.GOOS] //runtime.GOOS -> linux, windows, darwin etc.
	if ok {                          //if we defined a clear func for that platform:
		value() //we execute it
	} else { //unsupported platform
		panic("Your platform is unsupported! I can't clear terminal screen :(")
	}
}

func main() {
	intro()
	gameBoard()
}

func rcvr() {
	if r := recover(); r != nil {
		gameBoard()
	}
}

func gameBoard() {
	var gMod uint8
	defer rcvr()

	hdr()
	fmt.Println("Game Mode :")
	fmt.Println("[1] Easy")
	fmt.Println("[2] Medium")
	fmt.Println("[3] Hard")
	fmt.Println("[4] Extreme")
	fmt.Println("")
	fmt.Println("[9] Exit")
	fmt.Println("")
	fmt.Print("Chose Mode : ")
	fmt.Scanln(&gMod)

	switch gMod {
	case 1:
		dolan("Easy", &gMod)
	case 2:
		dolan("Medium", &gMod)
	case 3:
		dolan("Hard", &gMod)
	case 4:
		dolan("Extreme", &gMod)
	case 9:
		fmt.Println("bye!")
		os.Exit(0)
	case 10:
		dsclm()
	}

	panic("I am panicking!")
}

func dolan(sMode string, mN *uint8) {
	var lV, q, rN, i, c, a, zr, iBase uint8
	var scr uint16
	zr = 0
	iBase = 25
	scr = uint16(zr)
	c = 10
	hsl := ""

	for lV = 0; lV < 10; lV++ {
		for q = 0; q < 3; q++ {
			rndS := rand.NewSource(time.Now().UnixNano())
			rnd := rand.New(rndS)
			cr := c
			rN = uint8(rnd.Intn(int(iBase * *mN)))

			for rN < 1 {
				rN = uint8(rnd.Intn(int(iBase * *mN)))
			}

			for i = 0; i < c; i++ {
				lvl := lV + 1
				qs := q + 1
				stt(&sMode, &hsl, &scr, &lvl, &qs, &cr)
				hsl = ""

				//fmt.Println("rNum : ", rN)
				fmt.Print("Your guess : ")
				fmt.Scanln(&a)

				if rN == a {
					fmt.Println("")
					fmt.Println("Yes, you right.")
					fmt.Println("My number is :", rN)
					fmt.Print("Press enter for next number...")
					fmt.Scanln()
					scr += uint16(cr + lV)
					break
				}
				if rN > a {
					hsl = "To low."
				}
				if rN < a {
					hsl = "To high."
				}

				cr--
			}
		}

		c--
	}

	stt(&sMode, &hsl, &scr, &zr, &zr, &zr)
	wEnt()
}

func stt(sttM, sttHsl *string, sttS *uint16, sttL, sttQ, sttC *uint8) {
	hdr()
	fmt.Println("Mode :", *sttM)
	fmt.Println("Score :", *sttS)
	if *sttL > 0 {
		fmt.Println("Level :", *sttL)
	}
	if *sttQ > 0 {
		fmt.Println("Question :", *sttQ)
	}
	if *sttC > 0 {
		fmt.Println("Chance :", *sttC)
	}
	fmt.Println("")
	if *sttHsl != "" {
		fmt.Println(*sttHsl)
	}
}

func hdr() {
	cClear()
	fmt.Println("==================================================")
	fmt.Println("                  Guess My Number                 ")
	fmt.Println("==================================================")
	fmt.Println("")
}

func dsclm() {
	hdr()
	fmt.Println("many thanks for oguy who teach me basic programing")
	fmt.Println("back at 2006")
	wEnt()
	cClear()
}

func intro() {
	hdr()
	fmt.Println("a simple game where you have to guess")
	fmt.Println("the (random) numbers generated by the system")
	fmt.Println("this game have 4 modes to determine range of number")
	fmt.Println("Easy : 1 to 25")
	fmt.Println("Medium : 1 to 50")
	fmt.Println("Hard : 1 to 75")
	fmt.Println("Extreme : 1 to 100")
	fmt.Println("each mode have 10 level")
	fmt.Println("each level have 3 number to guess and each level")
	fmt.Println("have different chance for guess")
	fmt.Println("each chance will be reduced every level up")
	fmt.Println("level 1 : 10 chance")
	fmt.Println("level 10 : 1 chance")
	fmt.Println("you get 10 point score if you guess at first chance")
	wEnt()
	cClear()
}

func wEnt() {
	fmt.Println("")
	fmt.Print("Press enter to continue...")
	fmt.Scanln()
}
